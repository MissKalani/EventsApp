@model EventsApp.MVC.ViewModels.HellViewModel

@{
    ViewBag.Title = "EventDetails";
}

<div class="container-fluid">
    <div class="row">
        <div id ="details-info" class="col-md-6">
            <h2 class="details-page-brief">@Model.DetailsViewModel.Event.Brief</h2>
            <p>Hosted by: </p>@Html.ActionLink(Model.DetailsViewModel.Event.AppUser.UserName, "Details", "User",new { username = Model.DetailsViewModel.Event.AppUser.UserName}, new { })

            <p>@Model.DetailsViewModel.Event.Detailed</p>
            <p>@Model.DetailsViewModel.Event.Address</p>
            <p>@Model.DetailsViewModel.Event.StartTime</p>

            <div class="panel panel-default">
                <div class="panel-heading">
                    Invited people
                </div>
                <div class="panel-body">
                    @if (Model.DetailsViewModel.InvitedUsers.Count != 0)
                    {
                        <table>
                            @foreach (var user in Model.DetailsViewModel.InvitedUsers)
                            {
                                <tr>
                                    <td>@user.UserName</td>
                                </tr>
                            }
                        </table>
                    }
                    else
                    {
                        if (Model.DetailsViewModel.Event.Visibility == EventsApp.DataModels.EventVisibility.Public)
                        {
                            <span>This event is public and anyone can view it. People can still be invited though!</span>
                        }
                        else
                        {
                            <span>No one has been invited to this event.</span>
                        }

                    }
                </div>
            </div>
            
            
        </div>
        <div class="col-md-6">
            <div id="details-map">
                
            </div>
        </div>
    </div>    
    @if (Model.DetailsViewModel.IsOwner)
    {
        <div class="row">

            <div class="col-md-12">
                <div class="panel panel-default">
                    <div class="panel-heading">
                        Invite others
                    </div>
                    <div id="" class="panel-body">
                        <!--<p>Invitation functionality has been temporarily disabled. We are working on it!</p>-->
                        @if (Model.DetailsViewModel.Event.Visibility == EventsApp.DataModels.EventVisibility.Public)
                        {
                            <p>This event is public, so anyone can find it. You can still invite people though!</p>
                        }

                        <p>Send a one-use invitation link to a friend:</p>

                        <div class="panel panel-default">
                            <div class="panel-body">
                                <div class="input-group">
                                    <span id="link-button" class="input-group-addon btn btn-default">Create Invitation Link</span>
                                    <input id="link-text" type="text" class="form-control" readonly aria-describedby="link-button" />
                                </div>
                            </div>
                        </div>
                        <div class="panel panel-default">
                            <div class="panel-body">
                                <p>Invite a user by their username:</p>
                                <div class="input-group">
                                    <span id="input-username-text" class="input-group-addon">Username</span>
                                    <input id="input-username" type="text" class="form-control" aria-describedby="input-username-text" />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                @Html.ActionLink("Edit Event", "Edit", new { id = Model.DetailsViewModel.Event.Id }, new { @class = "btn btn-primary" })
                @Html.ActionLink("Delete Event", "Delete", new { id = Model.DetailsViewModel.Event.Id }, new { @class = "btn btn-danger" })
            </div>
        </div>
    }
</div>

@section Scripts {
    <script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyD41720sN_6eizUy9C-_xg9l7CdNrb7iiE&callback=initMap"></script>
    @Scripts.Render("~/bundles/js/jquery-ui")

    <script>
    function initMap() {
        var map = new google.maps.Map(document.getElementById('details-map'), {
            center: { lat: @Model.DetailsViewModel.Event.Latitude, lng: @Model.DetailsViewModel.Event.Longitude },
            zoom: 8
        });

        var marker = new google.maps.Marker({
            position: new google.maps.LatLng(@Model.DetailsViewModel.Event.Latitude, @Model.DetailsViewModel.Event.Longitude),
            map: map,
            title: "@HttpUtility.HtmlEncode(Model.DetailsViewModel.Event.Brief)"
        });
    }

    $('#link-button').click(function () {
        // Generate a new link using AJAX.
        $.ajax({
            url: '@Url.Action("Generate", "Link")',
            data: { eventId: @Model.DetailsViewModel.Event.Id },
            method: "POST",
            success: fetchLinkSuccess,
            error: fetchLinkError
        });

        function fetchLinkSuccess(data, status) {
            $("#link-text").val(data.url);
        }

        function fetchLinkError(xhr, status, exception) {
            $('#link-text').val('Failed to retrieve link');
        }
    });

    $('#input-username').on('input', function(e) {
        console.log("Input changed");

        $.ajax({
            url: '@Url.Action("Search", "User")',
            data: { usernameSubstring: $(this).val() },
            method: "POST",
            success: fetchUserSuccess,
            error: fetchUserError
        });

        function fetchUserSuccess(data, status) {          
            console.log(data);
            $('#input-username').autocomplete({
                source: data
            });
        }

        function fetchUserError(xhr, status, exception) {
            console.log("Failed to search for usernames");
        }
    });
    </script>
}