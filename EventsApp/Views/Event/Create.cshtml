@model EventsApp.ViewModels.CreateViewModel
@{
    ViewBag.Title = "Create";
}

<div id="create-panel" class="panel panel-default">
    <div class="panel-body">
        <div class="row">
            <div class="col-md-12">
                @using (Html.BeginForm("Create", "Event", new { }, FormMethod.Post, new { role = "form" }))
                {
                    @Html.ValidationSummary(true, null, new { @class = "text-danger" })

                    <div class="form-group">
                        @Html.LabelFor(t => t.Brief, new { @class = "control-label" })
                        @Html.TextBoxFor(t => t.Brief, new { @class = "form-control", placeholder = "Write a brief event description." })
                        @Html.ValidationMessageFor(t => t.Brief, null, new { @class = "text-danger" })
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(t => t.Detailed, new { @class = "control-label" })
                        @Html.TextAreaFor(t => t.Detailed, 5, 80, new { @class = "form-control", placeholder = "Add some details about the event." })
                        @Html.ValidationMessageFor(t => t.Detailed, null, new { @class = "text-danger" })
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(t => t.Visibility, "Public", new { @class = "control-label" })
                        @Html.RadioButtonFor(t => t.Visibility, "Public")
                        @Html.LabelFor(t => t.Visibility, "Private", new { @class = "control-label" })
                        @Html.RadioButtonFor(t => t.Visibility, "Private")                      
                    </div>
                    <div class="form-group">
                        @Html.TextBoxFor(t => t.Latitude, new { id = "create-event-latitude" })
                    </div>
                    <div class="form-group">
                        @Html.TextBoxFor(t => t.Longitude, new { id = "create-event-longitude" })
                    </div>
                    <div class="form-group date">
                        @Html.LabelFor(t => t.StartTime, new { @class = "control-label" })
                        @Html.TextBoxFor(t => t.StartTime, new { @class = "form-control", id = "create-event-datepicker", placeholder = "Select date." })
                        @Html.ValidationMessageFor(t => t.StartTime, null, new { @class = "text-danger" })
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(t => t.Address, new { @class = "control-label" })
                        @Html.TextBoxFor(t => t.Address, new { @class = "form-control", id = "create-event-address", placeholder = "Search for an address." })
                        @Html.ValidationMessageFor(t => t.Address, null, new { @class = "text-danger" })
                    </div>
                    <div id="map">
                    </div>
                    <div class="form-group">
                        <button type="submit" class="btn btn-default">Create</button>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyD41720sN_6eizUy9C-_xg9l7CdNrb7iiE&libraries=places&callback=initMap"></script>

    <script>
        var map;
        function initMap() {
            var initialCenter = new google.maps.LatLng(59.690815, 15.215400);

            map = new google.maps.Map(document.getElementById('map'), {
                center: initialCenter,
                zoom: 8
            });

            var marker = new google.maps.Marker({
                position: initialCenter,
                map: map,
                draggable: true
            });

            $('#create-event-latitude').val(initialCenter.lat);
            $('#create-event-longitude').val(initialCenter.lng);

            var addressInput = $('#create-event-address')[0];
            var searchBox = new google.maps.places.SearchBox(addressInput);

            searchBox.addListener('places_changed', function () {
                var places = searchBox.getPlaces();

                if (places.length != 1)
                    return;

                // Set the position of the draggable marker.
                marker.setPosition(places[0].geometry.location);

                // Update the hidden lat/lng fields.
                $('#create-event-latitude').val(places[0].geometry.location.lat);
                $('#create-event-longitude').val(places[0].geometry.location.lng);

                // Fit the map bounds.
                var bounds = new google.maps.LatLngBounds();
                if (places[0].geometry.viewport) {
                    bounds.union(places[0].geometry.viewport);
                } else {
                    bounds.extend(places[0].geometry.location);
                }

                map.fitBounds(bounds);
            });

            marker.addListener('dragend', function () {
                // Update the hidden lat/lng fields.
                $('#create-event-latitude').val(marker.position.lat());
                $('#create-event-longitude').val(marker.position.lng());
            });

            $('#create-event-latitude').change(function () {
                var latitude = Number($(this).val());
                console.log(latitude);
                marker.setPosition(new google.maps.LatLng(latitude, marker.position.lng()));
                console.log(marker.position);
            });

            $('#create-event-longitude').change(function () {
                var longitude = Number($(this).val());
                console.log(longitude);
                marker.setPosition(new google.maps.LatLng(marker.position.lat(), longitude));
                console.log(marker.position);
            });

        }

        $(document).ready(function () {
            $('#create-event-datepicker').datepicker({ format: 'yyyy-mm-dd' });
        });
    </script>
}